Ext.define("Sch.widget.mixin.CustomizableRecordForm", {

    extend : 'Ext.Mixin',

    isCustomizableRecordForm : true,

    customizableFieldNames : null,

    mixinConfig : {
        id : 'customizableRecordForm',

        before : {
            loadRecord   : 'beforeCustomizableRecordLoad',
            updateRecord : 'beforeCustomizableRecordUpdate'
        },
        after : {
            updateRecord : 'afterCustomizableRecordUpdate'
        }
    },

    updateAllFields                  : false,

    renameCustomizableFieldNamesOnce : true,

    customizableFieldNamesRenamed    : 0,

    autogeneratedFieldsToRemove      : null,

    setupCustomizableRecordForm : function (form, model) {
        var me = this;

        me.customizableFieldNames = {};

        if (model) {
            var modelPrototype = model.prototype;

            for (var i in modelPrototype) {
                if (i.match(/Field$/) && typeof modelPrototype[i] == 'string') {
                    me.customizableFieldNames[i] = modelPrototype[i];
                }
            }
        }
    },

    extractCustomizableFieldNames : function (event) {
        var result;

        if (event) {
            result = {};

            for (var i in this.customizableFieldNames) {
                result[i] = event[i];
            }
        }

        return result;
    },

    beforeCustomizableRecordLoad : function (event) {
        if (!this.renameCustomizableFieldNamesOnce || !this.customizableFieldNamesRenamed) {
            this.renameCustomizableFieldNames(event);
        }
    },

    // Renames form fields according to provided model.
    renameCustomizableFieldNames : function (event) {
        var newFields = this.extractCustomizableFieldNames(event);

        if (newFields) {
            this.customizableFieldNamesRenamed++;

            var form    = this.getForm(),
                changed = false,
                field;

            for (var i in this.customizableFieldNames) {
                field = form.findField(this.customizableFieldNames[i]);

                // check if field name should be changed
                if (field && newFields[i] && newFields[i] != field.name) {
                    changed    = true;
                    field.name = newFields[i];
                }
            }

            // if something has changed store new field names
            if (changed) {
                this.customizableFieldNames = newFields;
            }
        }
    },

    buildMissingCustomizableRecordField : function (fieldName, cfg) {
        return Ext.create(Ext.apply({
            xtype : 'hiddenfield',
            name  : fieldName
        }, cfg));
    },

    addMissingCustomizableRecordFields : function () {
        var me         = this,
            values     = me.getForm().getFieldValues(),
            fieldNames = Ext.Object.getValues(me.customizableFieldNames),
            added      = [];

        for (var i = 0; i < fieldNames.length; i++) {
            var fieldName = fieldNames[i];
            if (!values.hasOwnProperty(fieldName)) {
                added.push(me.add(me.buildMissingCustomizableRecordField(fieldName)));
            }
        }

        return added;
    },

    beforeCustomizableRecordUpdate : function () {
        var me = this;

        if (me.updateAllFields) {
            me.autogeneratedFieldsToRemove = me.addMissingCustomizableRecordFields();
        }
    },

    afterCustomizableRecordUpdate : function () {
        var me = this;

        if (me.autogeneratedFieldsToRemove) {
            var toRemove = me.autogeneratedFieldsToRemove;

            for (var i = 0; i < toRemove.length; i++) {
                me.remove(toRemove[i]);
            }
        }
    }

});