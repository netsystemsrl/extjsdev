var CurrentFlowId = 0;var CurrentObjectName = '';var CurrentObjectId = '';var JsonFlow = new Array();var JsonObjKeysName = [];var JsonObjKeysValue = [];Ext.namespace('Custom');var myDiagram;Custom.FlowSave = function(FlowId){		//converti in stringa	var json = myDiagram.model.toJson();	//var json = JSON.parse(myDiagram.model.toJson())    myDiagram.isModified = false;		Ext.Msg.alert('Sending', json);		//Invia i dati al server	Ext.Ajax.request({		method: 'POST',		type: 'ajax',		params: {json:json				},		url: '../includes/io/FlowWrite.php',		success: function(msg) {			Ext.Msg.alert('Sending', msg.responseText);		},		failure: function() {			Ext.Msg.alert('error', 'Not Ok');		}	})}Custom.GetItemProperty = function (obj) {	var JsonStr ='';	Ext.Object.each(obj, function(key, value, myself) {		if ((typeof value !== 'object') && (value != '')) 		{			valuestr = '' + value;						if ((valuestr != 'default')  && 				(key.substr(0, 1) != '_') && (key.substr(0, 2) != 'on') && 				(valuestr.substr(0,11) != 'function ()') &&				(key.slice(-3) != 'Cls') &&				(key.slice(-2) != 'UI') &&				(key.slice(-2) != 'ui') &&				(key != 'rendered')) {					JsonStr = JsonStr + "'" + key + "'" + ':' + "'" + valuestr + "',";				};		}	}); 	JsonStr = '{' + JsonStr + '}';	return Ext.util.JSON.decode(JsonStr);}Custom.FlowLoad = function(FlowId) {	console.log('FlowLoad');	CurrentFlowId = FlowId;	JsonFlow = new Array();		Ext.Ajax.request({		type: 'ajax',		url: '../includes/io/FlowRead.php',		params: {id:FlowId,				format:'json'},		async: false,		success: function(response) {			var JsonAppo = Ext.util.JSON.decode(response.responseText);			if (JsonAppo.status = 'Success'){				myDiagram.model = go.Model.fromJson(response.responseText);			} else {                Ext.Msg.alert("Error Parse Layout" + JsonAppo.status, JsonAppo.message);            }		},		failure: function() {Ext.Msg.alert("Error Load Layout", "errore");},	});}Custom.FlowErase = function(FlowId) {	console.log('FlowLoad');	CurrentFlowId = FlowId;	JsonFlow = new Array();		Ext.Ajax.request({		type: 'ajax',		url: '../includes/io/FlowLayoutErase.php',		params: {id:FlowId},		async: false,		success: function(response) {			if (JsonAppo.status = 'Success'){			} else {                Ext.Msg.alert("Error Erase Layout" + JsonAppo.status, JsonAppo.message);            }		},		failure: function() {Ext.Msg.alert("Error Erase Layout", "errore");},	});}Custom.FlowDelete = function(FlowId) {	console.log('FlowLoad');	CurrentFlowId = FlowId;	JsonFlow = new Array();		Ext.Ajax.request({		type: 'ajax',		url: '../includes/io/FlowLayoutDelete.php',		params: {id:FlowId},		async: false,		success: function(response) {			var JsonAppo = Ext.util.JSON.decode(response.responseText);			if (JsonAppo.status = 'Success'){			} else {                Ext.Msg.alert("Error Delete Layout" + JsonAppo.status, JsonAppo.message);            }		},		failure: function() {Ext.Msg.alert("Error Delete Layout", "errore");},	});}  // Allow the user to edit text when a single node is selected  function onSelectionChanged(e) {    var node = e.diagram.selection.first();    if (node instanceof go.Node) {      updateProperties(node.data);    } else {      updateProperties(null);    }  }  // Update the HTML elements for editing the properties of the currently selected node, if any  function updateProperties(data) {	var PropertyGrid = Ext.getCmp('PropertyGrid');	var DesignPanel = Ext.getCmp('DesignPanel');	var obj ;	var i = 0;	    if (data === null) {      //document.getElementById("propertiesPanel").style.display = "none";      //document.getElementById("name").value = "";      //document.getElementById("ct_ext").value = "";      //document.getElementById("comments").value = "";    } else {      //document.getElementById("propertiesPanel").style.display = "block";		if (data){		//grid			//carico store griproperty con l'array dell'oggetto			PropertyGrid.setSource(data);		}	      //document.getElementById("name").value = data.name || "";      //document.getElementById("ct_ext").value = data.ct_ext || "";      //document.getElementById("comments").value = data.comments || "";    }  }  // This is called when the user has finished inline text-editing  function onTextEdited(e) {    var tb = e.subject;    if (tb === null || !tb.name) return;    var node = tb.part;    if (node instanceof go.Node) {      updateProperties(node.data);    }  }  // Update the data fields when the text is changed  function updateData(text, field) {    var node = myDiagram.selection.first();    // maxSelectionCount = 1, so there can only be one Part in this collection    var data = node.data;    if (node instanceof go.Node && data !== null) {      var model = myDiagram.model;      model.startTransaction("modified " + field);      if (field === "name") {        model.setDataProperty(data, "name", text);      } else if (field === "ct_ext") {        model.setDataProperty(data, "ct_ext", text);      } else if (field === "comments") {        model.setDataProperty(data, "comments", text);      }      model.commitTransaction("modified " + field);    }  }  //*************************************************************************************************************////				GENERICCustom.isNumber = function (n){  return !isNaN(parseFloat(n)) && isFinite(n);}Custom.isNotNull = function(obj){ return obj && obj !== "null" && obj!== "undefined";}Custom.getURLVar = function (urlVarName){	var urlHalves = String(document.location).split('?');	var urlVarValue = '';	if(urlHalves[1]){var urlVars = urlHalves[1].split('&');for(i=0; i<=(urlVars.length); i++){if(urlVars[i]){var urlVarPair = urlVars[i].split('=');if (urlVarPair[0] && urlVarPair[0] == urlVarName) {urlVarValue = urlVarPair[1];}}}}	return urlVarValue;}Custom.openLinkInNewWindow = function (strUrl, strWindowName){  if(windowObjectReference == null || windowObjectReference.closed) {    windowObjectReference = window.open(strUrl, strWindowName, "resizable,scrollbars,status");  } else {    windowObjectReference.focus();  }}var toType = function(obj) {  return ({}).toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase()}function clone(obj){    if(obj == null || typeof(obj) != 'object')        return obj;    var temp = new obj.constructor();     for(var key in obj)        temp[key] = clone(obj[key]);    return temp;}var getSubItemFromName = function (subMenuItems, name) {    if (subMenuItems) {        for (var i = 0; i < subMenuItems.length; i++) {            if (subMenuItems[i].name == name) {                return subMenuItems[i];            }            var found = getSubItemFromName(subMenuItems[i].items, name);            if (found) return found;        }    }};var removeSubItemFromName = function (subMenuItems, name) {    if (subMenuItems) {        for (var i = 0; i < subMenuItems.length; i++) {            if (subMenuItems[i].name == name) {				subMenuItems.splice(i,1);                return subMenuItems[i];            }            var found = removeSubItemFromName(subMenuItems[i].items, name);            if (found) return found;        }    }};//*************************************************************************************************************////				DRAG&DROPExt.define('myPanelDropTarget', {    extend: 'Ext.dd.DropTarget',    notifyEnter : function(source, e, data) {        console.log('enter');        return this.callParent(arguments);    },                    notifyOut  : function(source, e, data) {        console.log('out');        return this.callParent(arguments);    },    notifyOver : function(source, e, data) {        console.log('over');        return this.callParent(arguments);    },                    notifyDrop : function(source, e, data) {        console.log('drop');        var fieldSetCount = Ext.getCmp('DesignPanel').fieldSetCount++;		var LocalText = data.records[0].get('text');		var LocalXtype = data.records[0].get('typeobj');		var LocalInputType = data.records[0].get('inputtypeobj');		var LocalFieldLabel = data.records[0].get('fieldlabelobj');		var LocalMaxLength = data.records[0].get('maxlengthobj');		var LocalDisplayField = data.records[0].get('displayfieldobj');				var Localct_ext = LocalText + fieldSetCount;		var LocalFieldLabel = LocalText + fieldSetCount;		var fieldSetCount = Ext.getCmp('DesignPanel').fieldSetCount++;				var clickSource = 0;		if (LocalText == LocalXtype) LocalText =''; 		if (LocalXtype == 'decisionState') { var dec1 = Ext.getCmp('DesignPanel').createDecision(e, fieldSetCount, 50, 50, LocalText);}		if (LocalXtype == 'actionState') { var dec1 = Ext.getCmp('DesignPanel').createAction(e, fieldSetCount, 50, 50, LocalText);}					return true;	}    });Ext.define('myTypeTreeDD', {    extend: 'Ext.data.Model',    fields: [        { name: 'typeobj', type: 'string' },		{ name: 'inputtypeobj', type: 'string' },		{ name: 'fieldlabelobj', type: 'string' },		{ name: 'maxlengthobj', type: 'string' },		{ name: 'displayfieldobj', type: 'string' },    ],    proxy: {        type: 'ajax',        api: {            create: 'createmyTypeTreeDD',            read: 'readmyTypeTreeDD',            update: 'updatemyTypeTreeDD',            destroy: 'destroymyTypeTreeDD'        }    }});//*************************************************************************************************************////				MAINExt.onReady(function(){	Ext.QuickTips.init();			/* ----- DEFINITION -------------------------------------------------*/{	CurrentFlowId = Custom.getURLVar('id');}	// -----------------------  TOOLBAR  ------------------------------	var ToolBar = Ext.create('Ext.Toolbar', {		id:'ToolBar',		defaults:{			border:false		},		items: [{				xtype: 'button', 				text: 'Save',				id: 'SaveButton',				listeners: {click: function() {						Custom.FlowSave(CurrentFlowId);}				}			},{				xtype: 'button', 				text: 'Load',				id: 'LoadButton',				listeners: {click: function() {						Custom.FlowLoad(CurrentFlowId);				}}			},{				xtype: 'button', 				text: 'Delete',				id: 'DeleteButton',				listeners: {click: function() {						Custom.FlowDelete(CurrentObjectName);					Custom.FlowLoad(CurrentFlowId);				}}			},{				xtype: 'button', 				text: 'Erase',				id: 'EraseButton',				listeners: {click: function() {						Custom.FlowErase(CurrentFlowId);					Custom.FlowLoad(CurrentFlowId);				}}			}		]	});// ------------------------ NORMAL --------------------------------	var CompNormalStore  = Ext.create('Ext.data.TreeStore', {		model:myTypeTreeDD,		root: {			id:'0',  //start or root value			text: 'Normal',			expanded:true,			draggable: true		},		proxy: {				type: 'ajax',				url: 'elements/normal.json'		},		        reader: {            type: 'json'        },			});    var ComNormal = Ext.create('Ext.tree.Panel', {        border:false,        id:'ComNormal',        useArrows: true,        store: CompNormalStore ,		viewConfig: {			plugins: {				ptype: 'treeviewdragdrop',				copy: true,				dragGroup: 'myDDGroup'			}		},    });// ---------------------- DICTIONARYFORM ------------------------------	var ComDictionaryFormStore  = Ext.create('Ext.data.TreeStore', {		model:myTypeTreeDD,		root: {			id:'0',  //start or root value			text: 'DBForm',			expanded:false,			draggable: true		},		proxy: {			type: 'ajax',			url: '../includes/io/dictionarylayout.php',			node: 'id' // send the parent id through GET (default 0)		}	});	var ComDictionaryForm = Ext.create('Ext.tree.Panel', {        border:false,        id:'ComDictionaryForm',		useArrows: true,        store: ComDictionaryFormStore ,		viewConfig: {			plugins: {				ptype: 'treeviewdragdrop',				copy: true,				dragGroup: 'myDDGroup'			}		},    });// ---------------------- DICTIONARYACTION ------------------------------	var ComDictionaryActionStore  = Ext.create('Ext.data.TreeStore', {		model:myTypeTreeDD,		root: {			id:'0',  //start or root value			text: 'DBAction',			expanded:false,			draggable: true		},		proxy: {			type: 'ajax',			url: '../includes/io/dictionaryaction.php',			node: 'id' // send the parent id through GET (default 0)		}	});	var ComDictionaryAction = Ext.create('Ext.tree.Panel', {        border:false,        id:'ComDictionaryAction',		useArrows: true,        store: ComDictionaryActionStore ,		viewConfig: {			plugins: {				ptype: 'treeviewdragdrop',				copy: true,				dragGroup: 'myDDGroup'			}		},    });// ---------------------- DICTIONARYPROCEDURE ------------------------------	var ComDictionaryProcedureStore  = Ext.create('Ext.data.TreeStore', {		model:myTypeTreeDD,		root: {			id:'0',  //start or root value			text: 'DBProcedure',			expanded:false,			draggable: true		},		proxy: {			type: 'ajax',			url: '../includes/io/dictionarycmd.php',			node: 'id' // send the parent id through GET (default 0)		}	});		var ComDictionaryProcedure = Ext.create('Ext.tree.Panel', {        border:false,        id:'ComDictionaryProcedure',		useArrows: true,        store: ComDictionaryProcedureStore ,		viewConfig: {			plugins: {				ptype: 'treeviewdragdrop',				copy: true,				dragGroup: 'myDDGroup'			}		},    });/* ---------------------- PropertyGRID ------------------------------*/{	var ProcedureStore = Ext.create('Ext.data.Store', {		fields: ['id', 'text'],		autoLoad: true,		remoteSort: false, 		sorters: [{			property: 'text',			direction: 'ASC' // or 'ASC'		}],		proxy: {			type: 'ajax',			url: '../includes/io/dictionarycmd.php',			reader: {				type: 'json',				rootProperty: '',			}		}	});	var PropertyGrid = Ext.create('Ext.grid.property.Grid', {		title			: 'Parameters',		id				: 'PropertyGrid',		split			: true,		region			: 'center',		source			: '',	});}// ---------------------- DESIGNPANEL -----------------------------	var overrides = {		endDrag: function() {			console.log('endDrag');			//var CurrentObjectExt = DesignPanel.getForm().findField(CurrentObjectName)			var CurrentObjectExt = Ext.get(CurrentObjectId).component;			var CurrentObjectName = CurrentObjectExt.name;			var i = 0;							var offsetx = 6;			var offsety = 6;						var mousePosX = CurrentObjectExt.getXY()[0];			var mousePosY = CurrentObjectExt.getXY()[1];			var elementMouseIsOver = document.elementFromPoint(mousePosX,mousePosY);			var elementMouseIsOverExt = Ext.get(elementMouseIsOver.id).component;						//cerco panel su cui sono sopra			var FormPanel = elementMouseIsOverExt;			if (FormPanel.xtype != 'panel') { FormPanel = FormPanel.ownerCt;}			console.log('offset x' + FormPanel.getX() + ' y ' + FormPanel.getY() + ' position inside sub panel drag');			offsetx = FormPanel.getXY()[0];			offsety = FormPanel.getXY()[1];						console.log('Obj->' + CurrentObjectName);				console.log('OBjExt->' + CurrentObjectExt.name);						/*var result = getSubItemFromName(JsonForm, CurrentObjectName);						if (result){				result.x = CurrentObjectExt.getXY()[0] - offsetx;				result.y = CurrentObjectExt.getXY()[1] - offsety;			}						//aggiorna property in form rendered			Custom.FormRender(CurrentFormId);				Custom.ObjInPropertyGrid(CurrentObjectName);			*/		}	};		var DesignPanel = Ext.create('Ext.panel.Panel',{		id:'DesignPanel',		title: 'Area Disegno',		html: ' <div id="myDiagram" style="background-color: #696969; border: solid 1px black; height: 95vh; width: 95oh"></div>',		width:'100%',		height:'100%',		border: true,		movable: false,	});/* ----- VIEWPORT ---------------------------------------------------*/	Ext.create('Ext.Viewport',{		id: 'MainViewport',        layout:'border',        items:[			{				id: 'ElementRegion',				region:'east',				title: 'Elements',				collapsible: true,				split:true,				width: 350,				layout:'fit',				margins:'0 5 0 0',				items:[				{					id: 'ElementPanel',					xtype:'panel',					border:false,					id:'VerticalToolBar',					autoScroll:true,					items:[ToolBar,ComNormal,ComDictionaryForm,ComDictionaryAction,ComDictionaryProcedure,PropertyGrid]				}]			}, {				region:'center',				id:'main-tabs',				deferredRender:false,				activeTab:0,				plain:true,				layoutOnTabChange : true,				items:[DesignPanel]			}        ]    });	var $ = go.GraphObject.make;  // for conciseness in defining templates	myDiagram = $(go.Diagram, "myDiagram", // must be the ID or reference to div        {          initialContentAlignment: go.Spot.Center,          // make sure users can only create trees          validCycle: go.Diagram.CycleDestinationTree,          // users can select only one part at a time          maxSelectionCount: 1,          layout:            $(go.TreeLayout,              {                treeStyle: go.TreeLayout.StyleLastParents,                arrangement: go.TreeLayout.ArrangementHorizontal,                // properties for most of the tree:                angle: 90,                layerSpacing: 35,                // properties for the "last parents":                alternateAngle: 90,                alternateLayerSpacing: 35,                alternateAlignment: go.TreeLayout.AlignmentBus,                alternateNodeSpacing: 20              }),          // support editing the properties of the selected person in HTML          "ChangedSelection": onSelectionChanged,          "TextEdited": onTextEdited,          // enable undo & redo          "undoManager.isEnabled": true        });	    // when the document is modified, add a "*" to the title and enable the "Save" button    myDiagram.addDiagramListener("Modified", function(e) {      var button = document.getElementById("SaveButton");      if (button) button.disabled = !myDiagram.isModified;      var idx = document.title.indexOf("*");      if (myDiagram.isModified) {        if (idx < 0) document.title += "*";      } else {        if (idx >= 0) document.title = document.title.substr(0, idx);      }    });    var levelColors = ["#AC193D/#BF1E4B", "#2672EC/#2E8DEF", "#8C0095/#A700AE", "#5133AB/#643EBF",                       "#008299/#00A0B1", "#D24726/#DC572E", "#008A00/#00A600", "#094AB2/#0A5BC4"];    // override TreeLayout.commitNodes to also modify the background brush based on the tree depth level    myDiagram.layout.commitNodes = function() {      go.TreeLayout.prototype.commitNodes.call(myDiagram.layout);  // do the standard behavior      // then go through all of the vertexes and set their corresponding node's Shape.fill      // to a brush dependent on the TreeVertex.level value      myDiagram.layout.network.vertexes.each(function(v) {        if (v.node) {          var level = v.level % (levelColors.length);          var colors = levelColors[level].split("/");          var shape = v.node.findObject("SHAPE");          if (shape) shape.fill = $(go.Brush, "Linear", { 0: colors[0], 1: colors[1], start: go.Spot.Left, end: go.Spot.Right });        }      });    }    // when a node is double-clicked, add a child to it    function nodeDoubleClick(e, obj) {      var clicked = obj.part;      if (clicked !== null) {        var thisemp = clicked.data;        myDiagram.startTransaction("add employee");        var nextkey = (myDiagram.model.nodeDataArray.length + 1).toString();        var newemp = { key: nextkey, name: "(new person)", ct_ext: "", parent: thisemp.key };        myDiagram.model.addNodeData(newemp);        myDiagram.commitTransaction("add employee");      }    }    // this is used to determine feedback during drags    function mayWorkFor(node1, node2) {      if (!(node1 instanceof go.Node)) return false;  // must be a Node      if (node1 === node2) return false;  // cannot work for yourself      if (node2.isInTreeOf(node1)) return false;  // cannot work for someone who works for you      return true;    }    // This function provides a common style for most of the TextBlocks.    // Some of these values may be overridden in a particular TextBlock.    function textStyle() {      return { font: "9pt  Segoe UI,sans-serif", stroke: "white" };    }    // This converter is used by the Picture.    function findHeadShot(key) {      if (key > 16) return ""; // There are only 16 images on the server      return "images/HS" + key + ".png"    };    // define the Node template    myDiagram.nodeTemplate =      $(go.Node, "Auto",        { doubleClick: nodeDoubleClick },        { // handle dragging a Node onto a Node to (maybe) change the reporting relationship          mouseDragEnter: function (e, node, prev) {            var diagram = node.diagram;            var selnode = diagram.selection.first();            if (!mayWorkFor(selnode, node)) return;            var shape = node.findObject("SHAPE");            if (shape) {              shape._prevFill = shape.fill;  // remember the original brush              shape.fill = "darkred";            }          },          mouseDragLeave: function (e, node, next) {            var shape = node.findObject("SHAPE");            if (shape && shape._prevFill) {              shape.fill = shape._prevFill;  // restore the original brush            }          },          mouseDrop: function (e, node) {            var diagram = node.diagram;            var selnode = diagram.selection.first();  // assume just one Node in selection            if (mayWorkFor(selnode, node)) {              // find any existing link into the selected node              var link = selnode.findTreeParentLink();              if (link !== null) {  // reconnect any existing link                link.fromNode = node;              } else {  // else create a new link                diagram.toolManager.linkingTool.insertLink(node, node.port, selnode, selnode.port);              }            }          }        },        // for sorting, have the Node.text be the data.name        new go.Binding("text", "name"),        // bind the Part.layerName to control the Node's layer depending on whether it isSelected        new go.Binding("layerName", "isSelected", function(sel) { return sel ? "Foreground" : ""; }).ofObject(),        // define the node's outer shape        $(go.Shape, "Rectangle",          {            name: "SHAPE", fill: "white", stroke: null,            // set the port properties:            portId: "", fromLinkable: true, toLinkable: true, cursor: "pointer"          }),        $(go.Panel, "Horizontal",          $(go.Picture,            {              name: 'Picture',              desiredSize: new go.Size(39, 50),              margin: new go.Margin(6, 8, 6, 10),            },            new go.Binding("source", "key", findHeadShot)),          // define the panel where the text will appear          $(go.Panel, "Table",            {              maxSize: new go.Size(150, 999),              margin: new go.Margin(6, 10, 0, 3),              defaultAlignment: go.Spot.Left            },            $(go.RowColumnDefinition, { column: 2, width: 4 }),            $(go.TextBlock, textStyle(),  // the name              {                row: 0, column: 0, columnSpan: 5,                font: "12pt Segoe UI,sans-serif",                editable: true, isMultiline: false,                minSize: new go.Size(10, 16)              },              new go.Binding("text", "name").makeTwoWay()),            /*$(go.TextBlock, "ct_ext: ", textStyle(),              { row: 1, column: 0 }),            $(go.TextBlock, textStyle(),              {                row: 1, column: 1, columnSpan: 4,                editable: true, isMultiline: false,                minSize: new go.Size(10, 14),                margin: new go.Margin(0, 0, 0, 3)              },              new go.Binding("text", "ct_ext").makeTwoWay()),			  */            /*			$(go.TextBlock, textStyle(),              { row: 2, column: 0 },              new go.Binding("text", "key", function(v) {return "ID: " + v;})),            $(go.TextBlock, textStyle(),              { row: 2, column: 3, },              new go.Binding("text", "parent", function(v) {return "Boss: " + v;})),			  */            $(go.TextBlock, textStyle(),  // the comments              {                row: 3, column: 0, columnSpan: 5,                font: "italic 9pt sans-serif",                wrap: go.TextBlock.WrapFit,                editable: true,  // by default newlines are allowed                minSize: new go.Size(10, 14)              },              new go.Binding("text", "comments").makeTwoWay())          )  // end Table Panel        ) // end Horizontal Panel      );  // end Node    // define the Link template    myDiagram.linkTemplate =      $(go.Link, go.Link.Orthogonal,        { corner: 5, relinkableFrom: true, relinkableTo: true },        $(go.Shape, { strokeWidth: 4, stroke: "#00a4a4" }));  // the link shape/* ----- LOAD FLOW --------------------------------------------------*/	Custom.FlowLoad(CurrentFlowId);	//Custom.FlowRender(CurrentFlowId);});
